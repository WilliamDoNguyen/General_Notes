Git Commands

git init - initialize the repository.
git add . - (Staging) add all the files that were changed since the last back up to the staging area.
git status - shows you all the files that were changed since the last backup and which ones are already added to the staging area.
git commit -m "..." - commits the changes to the repository.
git checkout ____ - switches to the branch name provided in your git repository. This will create a new branch if the name provided doesn't exist.
git branch - shows all of your git branches and marks the one you are currently on.
git log - shows all the backups created in the repository.
git blame ____ - shows who wrote which line of code or in other words who is to be blamed for that particular line of code.
git remote add origin ____ - tells git to add a remote place called 'origin' to a remote URL ___.
git push - pushes the changes in your local repository to the remote repository.
git pull - pulls the changes in a remote repository to your own local repository.
git clone ___ - clones a remote repository in ___ to your own local folder.
rm -rf .git (hardcore way to wipe the slate clean)
git revert -n {name of commit to revert} (creates a new commit in the repository that reverses all the changes made by the original commit but the -n stops it from immediately committing if multiple reversals are needed)
git reset <commit hash> --hard (ie. git reset 6c77676 --hard)
    - If you only want to reset the changes to a particular file and not the whole project, you can run:
        git reset <commit hash> <filename> --hard
git rm -r filename - removes file/folder
__________________________________________________________________________
Steps:
/my-project

1) create github repository
2) git init
3) git add README.md
4) git add css/nav.css (staging a specific file)
4) git add . (add all files from existing file tree, down)
5) git commit -m working files (-m is for message and part after is the message)
6) git branch -M main
7) git remote add origin https://github.com/WilliamDoNguyen/JavaScript_Basics.git
8) git push -u origin main

//updating
// in the same folder,
    - use git add .
    - git commit -m "(description)"
    - git push

// deleting a file
// in the same folder,
    - git add .
    - git commit -m "(description of removing file, etc.)"
    - git push (check if files were deleted in console)
__________________________________________________________________________

Git Ignore
// create a text file called .gitignore
.gitignore must be inside your project's root directory (name and location are IMPORTANT)
.gitignore text file example:
# ignores any file named "secret.txt"
secret.txt
# ignores any directory named "secrets"
secrets/
# ignores a file named "hidden.txt" located at the root of your working directory
/hidden.txt
# ignores a directory called "node_modules" located at the root of your working directory
/node_modules/
# ignores any file with a .png extension
*.png
# ignores any file or directory that begins in "cache", such as cache-file-01, cached_assets/, etc.
cache*
# ignores any file or directory that ends in "data", such as project_data/, big_file_of_data
*data

__________________________________________________________________________

Workflow

Step 1: Setup

git remote add origin URL


Step 2: Creating a branch
- Create branches off from develop for fixes or features, and then push to the develop branch.
git checkout -b BRANCHNAME

Move to different branches:
git checkout BRANCHNAME

Check current branch:
git branch


Step 3: Merging into the develop branch
git pull origin develop

Step 4: Pushing to the master branch
- Once the develop branch is ready and working, merge the develop branch into the master, and push to GitHub.

__________________________________________________________________________
MongoDB CRUD

Create
// Pattern:
db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})

// Example:
db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

Read
// Pattern:
db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})

Destroy
// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)
// Example
db.ninjas.remove({belt: "yellow"})
db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.

Update
// Example:
db.ninjas.update({name: "Trey"}, {location: "Mountain View"})
// Pattern:
db.COLLECTION_NAME.update({QUERY}, {FIELDS_TO_UPDATE}, {OPTIONS})
// Note: the options document is optional

// $set operator
// Example:
db.ninjas.update({name: "Trey"}, {$set: {location: "Mountain View"}})

// If I wanted to get all the Dojos whose number of students is greater than 15, I would run the following:
db.dojos.find({number_of_students: {$gt: 15}})


name	                                                              description
$gt (greater than)	                            Use to query selectively on numerical-valued fields
$gte (greater than or equal to)	                Use to query selectively on numerical-valued fields
$lt (less than)	                                Use to query selectively on numerical-valued fields
$lte (less than or equal to)	                Use to query selectively on numerical-valued fields
$in (in array)	                                Use to find documents who have a particular value within an array.

// we wanted to add an element in the interests array. The operator we would use is called the $push operator, which should sound very familiar. To add the interest 'snowboarding' to the student document, we would run...
db.students.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})


Name	                                        Description
$push	                        Push to an array contained within a document.
$pop	                        Removes either the first or last element from an array. EX:
                                db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})
                                Use 1 for the last item in the array, -1 for the first item.

$addToSet	                    It functions just like $push.  However, $addToSet only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).
$pull	                        Removes a specified value from an array, unlike $pop, which removes by location. Ex:
                                db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})
                                This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.



__________________________________________________________________________
